#!/bin/sh
set -e

# defaults
USE_BLAS=0
USE_OPENCV=0
BUILD_LIB=0
BUILD_EXAMPLES=0
BUILD_TESTS=0
BUILD_BENCHMARKS=0
USE_EXTERN=0
VERBOSE=0

parse_args() {
    for i in "$@"; do
        case $i in
        --prefix=*)
            PREFIX="${i#*=}"
            ;;
        --use-blas)
            USE_BLAS=1
            ;;
        --use-opencv)
            USE_OPENCV=1
            ;;
        --lib)
            BUILD_LIB=1
            ;;
        --examples)
            BUILD_EXAMPLES=1
            ;;
        --tests)
            BUILD_TESTS=1
            ;;
        --no-tests)
            BUILD_TESTS=0
            ;;
        --benchmarks)
            BUILD_BENCHMARKS=1
            ;;
        --no-benchmarks)
            BUILD_BENCHMARKS=0
            ;;
        --extern)
            USE_EXTERN=1
            ;;
        --verbose)
            VERBOSE=1
            ;;
        *)
            echo "unknown argument $i"
            exit 1
            ;;
        esac
    done
}

CMAKE_FLAGS=

add_cmake_flag() {
    echo "Using $1=$2"
    CMAKE_FLAGS="$CMAKE_FLAGS -D$1=$2"
}

pass_cmake_flag_from_env() {
    local name=$1
    local env_key=$2
    if [ -z ${env_key} ]; then
        env_key=$name
    fi
    local val=$(eval echo \$$env_key)
    if [ ! -z "$val" ]; then
        add_cmake_flag $name $val
    fi
}

add_cmake_flags() {
    pass_cmake_flag_from_env CMAKE_INSTALL_PREFIX PREFIX

    if [ ${BUILD_TESTS} -eq 1 ]; then
        pass_cmake_flag_from_env GTEST_GIT_URL
    fi
    if [ ${BUILD_BENCHMARKS} -eq 1 ]; then
        pass_cmake_flag_from_env GBENCH_GIT_URL
    fi

    pass_cmake_flag_from_env STDTRACER_GIT_URL
    pass_cmake_flag_from_env STDTENSOR_GIT_URL

    add_cmake_flag EXECUTABLE_OUTPUT_PATH $(pwd)/bin
    # add_cmake_flag LIBRARY_OUTPUT_PATH $(pwd)/lib
    add_cmake_flag CMAKE_BUILD_TYPE Release
    add_cmake_flag CMAKE_EXPORT_COMPILE_COMMANDS 1
    add_cmake_flag CMAKE_VERBOSE_MAKEFILE 1

    # add_cmake_flag USE_OPT 1
    add_cmake_flag USE_OPENCV ${USE_OPENCV}
    add_cmake_flag USE_OPENBLAS ${USE_BLAS}
    add_cmake_flag BUILD_LIB ${BUILD_LIB}
    add_cmake_flag BUILD_EXAMPLES ${BUILD_EXAMPLES}
    add_cmake_flag BUILD_TESTS ${BUILD_TESTS}
    add_cmake_flag BUILD_BENCHMARKS ${BUILD_BENCHMARKS}
    add_cmake_flag BUILD_PACKAGES 1
    add_cmake_flag USE_EXTERN ${USE_EXTERN}

    # FIXME: depend on a tag for release version
    add_cmake_flag STDTENSOR_GIT_TAG $(head -n 1 ./deps/stdtensor)

    add_cmake_flag CMAKE_EXPORT_COMPILE_COMMANDS ${VERBOSE}
}

cleanup_cmake_cache() {
    if [ -f CMakeCache.txt ]; then
        rm CMakeCache.txt
    fi
    for cmake_cache in $(find 3rdparty/ | grep CMakeCache.txt); do
        rm $cmake_cache
    done
}

parse_args $@
add_cmake_flags
cleanup_cmake_cache
cmake . $CMAKE_FLAGS
