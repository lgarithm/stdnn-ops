#!/bin/bash
set -e

CMAKE_FLAGS=

# defaults
# WITH_BLAS=1

add_cmake_flag() {
    echo "usinig $1=$2"
    CMAKE_FLAGS="$CMAKE_FLAGS -D$1=$2"
}

parse_args() {
    for i in "$@"; do
        case $i in
        --prefix=*)
            PREFIX="${i#*=}"
            ;;
        # --with-blas)
        #     WITH_BLAS=1
        #     ;;
        # --without-blas)
        #     WITH_BLAS=
        #     ;;
        *)
            echo "unknown argument $1"
            exit
            ;;
        esac
    done
}

add_cmake_flags() {
    if [ ! -z ${PREFIX} ]; then
        add_cmake_flag CMAKE_INSTALL_PREFIX ${PREFIX}
    fi

    if [ ! -z ${GTEST_GIT_URL} ]; then
        add_cmake_flag GTEST_GIT_URL ${GTEST_GIT_URL}
    fi

    if [ ! -z ${STDTRACER_GIT_URL} ]; then
        add_cmake_flag STDTRACER_GIT_URL ${STDTRACER_GIT_URL}
    fi

    if [ ! -z ${STDTENSOR_GIT_URL} ]; then
        add_cmake_flag STDTENSOR_GIT_URL ${STDTENSOR_GIT_URL}
    fi

    add_cmake_flag EXECUTABLE_OUTPUT_PATH $(pwd)/bin
    add_cmake_flag LIBRARY_OUTPUT_PATH $(pwd)/lib
    add_cmake_flag CMAKE_BUILD_TYPE Release
    add_cmake_flag CMAKE_EXPORT_COMPILE_COMMANDS 1
    add_cmake_flag CMAKE_VERBOSE_MAKEFILE 1
    add_cmake_flag BUILD_PACKAGES 1

    # add_cmake_flag USE_OPENCV 1
    # add_cmake_flag USE_OPENBLAS 1
    # add_cmake_flag BUILD_TESTS 0

    # if [ ! -z ${WITH_BLAS} ]; then
    #     add_cmake_flag USE_BLAS 1
    # fi
}

parse_args $@
add_cmake_flags
cmake . $CMAKE_FLAGS
