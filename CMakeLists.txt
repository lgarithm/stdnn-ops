CMAKE_MINIMUM_REQUIRED(VERSION 3.9)
PROJECT(libnn)

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

FIND_PACKAGE(stdtensor REQUIRED)

ADD_DEFINITIONS(-Wall)
ADD_DEFINITIONS(-Werror)
ADD_DEFINITIONS(-Wfatal-errors)

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/3rdparty/include)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)

LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/3rdparty/lib)

OPTION(USE_OPT "Turn on optimization flags." OFF)
OPTION(USE_OPENBLAS "Build with blas." OFF)
OPTION(USE_OPENCV "Build with opencv." OFF)
OPTION(BUILD_TESTS "Build tests." ON)
OPTION(BUILD_BENCHMARKS "Build benchmarks." ON)
OPTION(BUILD_EXAMPLES "Build examples." ON)
OPTION(BUILD_PACKAGES "Build release packages." OFF)
OPTION(TRACE_EXAMPLES "Enable trace for examples." ON)

IF(USE_OPT)
    ADD_DEFINITIONS(-ffast-math)
ENDIF()

IF(BUILD_TESTS)
    ENABLE_TESTING()
    INCLUDE(cmake/tests.cmake)
ENDIF()

IF(BUILD_BENCHMARKS)
    INCLUDE(cmake/benchmarks.cmake)
ENDIF()

IF(USE_OPENBLAS)
    MESSAGE("Using OpenBLAS")
    FIND_PACKAGE(OpenBLAS REQUIRED)
    ADD_DEFINITIONS(-DSTDNN_OPS_HAVE_CBLAS)
    INCLUDE_DIRECTORIES(${OpenBLAS_INCLUDE_DIRS})
ENDIF()

IF(USE_OPENCV)
    FIND_PACKAGE(OpenCV REQUIRED)
ENDIF()

IF(BUILD_EXAMPLES)
    ADD_SUBDIRECTORY(examples)
ENDIF()

IF(BUILD_PACKAGES)
    INSTALL(DIRECTORY include DESTINATION .)
    INCLUDE(cmake/package.cmake)
ENDIF()
